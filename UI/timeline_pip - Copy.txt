# TimelinePip.gd
extends Control
class_name TimelinePip

# --- state ---
var wave_number: int
var wave_type: Phases.WaveType
var _is_current: bool = false

# --- node references ---
@export var color_rect: ColorRect 

# --- configuration for visual states ---
const NORMAL_COLOR := Color("#ffffff")
const BOSS_COLOR := Color("#ff6347")   # tomato red
const REWARD_COLOR := Color("#ffd700") # gold
const SURGE_COLOR := Color("#add8e6")  # light blue
const NORMAL_SIZE : Vector2 = Vector2(10,10)
const FOCUS_SIZE : Vector2 = Vector2(18,18)
const TWEEN_TIME : float = 0.5

# configures the pip's state from the timeline controller
func setup(p_wave_number: int, p_wave_type: Phases.WaveType) -> void:
	self.wave_number = p_wave_number
	self.wave_type = p_wave_type
	_update_visuals()

# sets if this pip represents the currently active wave
func set_is_current(is_current: bool) -> void:
	if self._is_current == is_current:
		return
	self._is_current = is_current
	_update_visuals()

# updates the pip's appearance based on its current state
func _update_visuals() -> void:
	var target_size : Vector2 = NORMAL_SIZE
	var target_color : Color = NORMAL_COLOR
	var target_rotation : float = 0
	
	# the 'current' state overrides the base color and shape
	if _is_current:
		target_size = FOCUS_SIZE
	else:
		target_size = NORMAL_SIZE

	# set color based on wave type for future pips
	match wave_type:
		Phases.WaveType.NORMAL:
			target_color = NORMAL_COLOR
			target_rotation = 0 # regular pips are squares
		Phases.WaveType.BOSS:
			target_color = BOSS_COLOR
			target_rotation = 45
		Phases.WaveType.REWARD:
			target_color = REWARD_COLOR
			target_rotation = 0
		Phases.WaveType.SURGE:
			target_color = SURGE_COLOR
			target_rotation = 0
	
	var tween: Tween = create_tween()
	tween.set_parallel(true)
	# set the animation's properties (target node, property, end value, duration)
	tween.tween_property(color_rect, "color", target_color, TWEEN_TIME)\
		.set_trans(Tween.TRANS_SINE)\
		.set_ease(Tween.EASE_OUT)
	
	tween.tween_property(self, "custom_minimum_size", target_size, TWEEN_TIME)\
		.set_trans(Tween.TRANS_SINE)\
		.set_ease(Tween.EASE_OUT)
	
	tween.tween_property(self, "rotation_degrees", target_rotation, TWEEN_TIME)\
		.set_trans(Tween.TRANS_SINE)\
		.set_ease(Tween.EASE_OUT)
